datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Admin {
  id_admin Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Supplier {
  id_supplier     Int               @id @default(autoincrement())
  nama            String
  email           String
  telepon         String
  alamat          String
  Barang          Barang[]
  Transaksi_Masuk Transaksi_Masuk[]
}

model Kategori {
  id_kategori Int      @id @default(autoincrement())
  nama        String
  Barang      Barang[]
}

model Merk {
  id_merk Int      @id @default(autoincrement())
  nama    String
  Barang  Barang[]
}

model Barang {
  id_barang     Int      @id @default(autoincrement())
  kode          String   @unique
  nama          String   @unique
  id_supplier   Int
  stok          Int
  harga         Decimal
  tanggal_masuk DateTime
  id_kategori   Int
  id_merk       Int

  supplier         Supplier           @relation(fields: [id_supplier], references: [id_supplier], onDelete: Cascade)
  kategori         Kategori           @relation(fields: [id_kategori], references: [id_kategori], onDelete: Cascade)
  merk             Merk               @relation(fields: [id_merk], references: [id_merk], onDelete: Cascade)
  Transaksi_Masuk  Transaksi_Masuk[]
  Transaksi_Keluar Transaksi_Keluar[]
  Detail_Stok      Detail_Stok[]
  Stok_Rendah      Stok_Rendah[]
  Reject           Reject[]
}

model Transaksi_Masuk {
  id_transaksi_masuk Int      @id @default(autoincrement())
  id_barang          Int
  id_supplier        Int
  tanggal            DateTime
  harga_satuan       Decimal
  jumlah             Int
  total_harga        Decimal
  catatan            String?

  barang   Barang   @relation(fields: [id_barang], references: [id_barang], onDelete: Cascade)
  supplier Supplier @relation(fields: [id_supplier], references: [id_supplier])
}

model Transaksi_Keluar {
  id_transaksi_keluar Int      @id @default(autoincrement())
  id_barang           Int
  tanggal             DateTime
  harga_satuan        Decimal
  jumlah              Int
  total_harga         Decimal
  catatan             String?

  barang Barang @relation(fields: [id_barang], references: [id_barang], onDelete: Cascade)
}

model Detail_Stok {
  id_detail_stok Int      @id @default(autoincrement())
  id_barang      Int
  tanggal_update DateTime @default(now())
  stok_awal      Int
  stok_masuk     Int      @default(0)
  stok_keluar    Int      @default(0)
  stok_akhir     Int

  barang Barang @relation(fields: [id_barang], references: [id_barang], onDelete: Cascade)
}

model Stok_Rendah {
  id_stok_rendah Int      @id @default(autoincrement())
  id_barang      Int
  minimum_stok   Int
  stok_sekarang  Int
  tanggal        DateTime

  barang Barang @relation(fields: [id_barang], references: [id_barang], onDelete: Cascade)
}

model Reject {
  id_reject Int      @id @default(autoincrement())
  id_barang Int
  tanggal   DateTime
  jumlah    Int
  alasan    String
  status    String

  barang Barang @relation(fields: [id_barang], references: [id_barang], onDelete: Cascade)
}
